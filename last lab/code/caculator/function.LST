C51 COMPILER V9.01   FUNCTION                                                              12/25/2016 13:31:38 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE FUNCTION
OBJECT MODULE PLACED IN function.OBJ
COMPILER INVOKED BY: E:\Keil\C51\BIN\C51.EXE function.c LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include<head.h>
   2          void addnum() //完成一个数字的添加
   3          {
   4   1              if(mark1==20)error2();
   5   1              else{
   6   2                      if(list[mark1][0]=='-'&&(list[mark1][1]<'0'|list[mark1][1]>'9'))
   7   2                      {
   8   3                              list[mark1][0]='0';
   9   3                      }
  10   2                      if(list[mark1][mark2-1]=='.')
  11   2                      {
  12   3                              list[mark1][mark2-1]=' ';
  13   3                              mark2--;
  14   3                      }
  15   2                      mem[mark1]=atof(list[mark1]);
  16   2                      mark1++;
  17   2                      mark2=0;
  18   2                      showmark=0;
  19   2                      sound=0;
  20   2              }
  21   1              addmark=0;
  22   1              DisplayFlag=1;
  23   1      }
  24          void backspace() //退格
  25          {
  26   1              if(mark2>0)
  27   1              {
  28   2                      mark2--;
  29   2                      list[mark1][mark2]=' ';
  30   2              }
  31   1          addmark=0;
  32   1              sound=0;
  33   1              showmark=0;
  34   1              DisplayFlag=1;
  35   1      }
  36          void sum()        //求和
  37          {
  38   1              if(mark1==0)error3();
  39   1              else
  40   1              {
  41   2                      double tsum=0;
  42   2                      int i;
  43   2                      for(i=0;i<mark1;i++)
  44   2                      {
  45   3                              tsum+=mem[i];
  46   3                      }
  47   2                      for(i=0;i<16;i++)
  48   2                      {
  49   3                              result[i]=' ';
  50   3                      }
  51   2                      sprintf(result,"%f",tsum);
  52   2                      showmark=2;
  53   2                      addmark=0;
  54   2                      sound=0;
  55   2                      DisplayFlag=1;
C51 COMPILER V9.01   FUNCTION                                                              12/25/2016 13:31:38 PAGE 2   

  56   2              }
  57   1      }
  58          void powsum()     //平方和
  59          {
  60   1              if(mark1==0)error3();
  61   1              else
  62   1              {
  63   2                      double tsum=0;
  64   2                      int i;
  65   2                      for(i=0;i<mark1;i++)
  66   2                      {
  67   3                              tsum=tsum+mem[i]*mem[i];
  68   3                      }
  69   2                      for(i=0;i<16;i++)
  70   2                      {
  71   3                              result[i]=' ';
  72   3                      }
  73   2                      sprintf(result,"%f",tsum);
  74   2                      showmark=2;
  75   2                      addmark=0;
  76   2                      sound=0;
  77   2                      DisplayFlag=1;
  78   2              }
  79   1      }
  80          void average1()    //平均数
  81          {
  82   1              if(mark1==0)error3();
  83   1              else
  84   1              {
  85   2                      double tsum=0;
  86   2                      int i;
  87   2                      for(i=0;i<mark1;i++)
  88   2                      {
  89   3                              tsum+=mem[i];
  90   3                      }
  91   2                      for(i=0;i<16;i++)
  92   2                      {
  93   3                              result[i]=' ';
  94   3                      }
  95   2                      tsum=tsum/mark1;
  96   2                      sprintf(result,"%f",tsum);
  97   2                      showmark=2;
  98   2                      addmark=0;
  99   2                      sound=0;
 100   2                      DisplayFlag=1;
 101   2              }
 102   1      }
 103          void average2()         //平方平均数
 104          {
 105   1              if(mark1==0)error3();
 106   1              else
 107   1              {
 108   2                      double tsum=0;
 109   2                      int i;
 110   2                      for(i=0;i<mark1;i++)
 111   2                      {
 112   3                              tsum=tsum+mem[i]*mem[i];
 113   3                      }
 114   2                      for(i=0;i<16;i++)
 115   2                      {
 116   3                              result[i]=' ';
 117   3                      }
C51 COMPILER V9.01   FUNCTION                                                              12/25/2016 13:31:38 PAGE 3   

 118   2                      tsum=tsum/mark1;
 119   2                      sprintf(result,"%f",tsum);
 120   2                      showmark=2;
 121   2                      addmark=0;
 122   2                      sound=0;
 123   2                      DisplayFlag=1;
 124   2              }
 125   1      }
 126          void standarddeviation()        //标准差
 127          {
 128   1              if(mark1==0)error3();
 129   1              else
 130   1              {
 131   2                      double avg=0;
 132   2                      double tsum=0;
 133   2                      int i;
 134   2                      for(i=0;i<mark1;i++)
 135   2                      {
 136   3                              avg+=mem[i];
 137   3                      }
 138   2                      avg=avg/mark1;
 139   2                      for(i=0;i<mark1;i++)
 140   2                      {
 141   3                              tsum=tsum+(mem[i]-avg)*(mem[i]-avg);
 142   3                      }
 143   2                      for(i=0;i<16;i++)
 144   2                      {
 145   3                              result[i]=' ';
 146   3                      }
 147   2                      tsum=tsum/mark1;
 148   2                      tsum=sqrt(tsum);
 149   2                      sprintf(result,"%f",tsum);
 150   2                      showmark=2;
 151   2                      addmark=0;
 152   2                      sound=0;
 153   2                      DisplayFlag=1;
 154   2              }       
 155   1      }
 156          void variance()          //方差
 157          {
 158   1              if(mark1==0)error3();
 159   1              else
 160   1              {
 161   2                      double avg=0;
 162   2                      double tsum=0;
 163   2                      int i;
 164   2                      for(i=0;i<mark1;i++)
 165   2                      {
 166   3                              avg+=mem[i];
 167   3                      }
 168   2                      avg=avg/mark1;
 169   2                      for(i=0;i<mark1;i++)
 170   2                      {
 171   3                              tsum=tsum+(mem[i]-avg)*(mem[i]-avg);
 172   3                      }
 173   2                      for(i=0;i<16;i++)
 174   2                      {
 175   3                              result[i]=' ';
 176   3                      }
 177   2                      tsum=tsum/mark1;
 178   2                      sprintf(result,"%f",tsum);
 179   2                      showmark=2;
C51 COMPILER V9.01   FUNCTION                                                              12/25/2016 13:31:38 PAGE 4   

 180   2                      addmark=0;
 181   2                      sound=0;
 182   2                      DisplayFlag=1;
 183   2              }       
 184   1      }
 185          void change()   //修改正负号
 186          {
 187   1              uchar i;
 188   1              if(list[mark1][0]=='-')
 189   1              {
 190   2                      for(i=0;i<15;i++)
 191   2                      {
 192   3                              list[mark1][i]=list[mark1][i+1];
 193   3                      }
 194   2                      list[mark1][15]='\0';
 195   2                      mark2--;
 196   2              }
 197   1              else{
 198   2                      for(i=15;i>0;i--)
 199   2                      {
 200   3                              list[mark1][i]=list[mark1][i-1];
 201   3                      }
 202   2                      list[mark1][0]='-';     
 203   2                      mark2++;
 204   2              }
 205   1              showmark=0;
 206   1              addmark=0;
 207   1              sound=0;
 208   1              DisplayFlag=1;
 209   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2999    ----
   CONSTANT SIZE    =      3    ----
   XDATA SIZE       =   ----      44
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
